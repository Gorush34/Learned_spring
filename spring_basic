/*
사용자 웹브라우저 요청(View)  ==> DispatcherServlet ==> @Controller 클래스 <==>> Service단(핵심업무로직단, business logic단) <==>> Model단[Repository](DAO, DTO) <==>> myBatis <==>> DB(오라클)           
(http://...  *.action)                                  |                                                                                                                              
 ↑                                                View Resolver
 |                                                      ↓
 |                                                View단(.jsp 또는 Bean명)
 -------------------------------------------------------| 

사용자(클라이언트)가 웹브라우저에서 http://localhost:9090/board/test_insert.action 을 실행하면
배치서술자인 web.xml 에 기술된 대로  org.springframework.web.servlet.DispatcherServlet 이 작동된다.
DispatcherServlet 은 bean 으로 등록된 객체중 controller 빈을 찾아서  URL값이 "/test_insert.action" 으로
매핑된 메소드를 실행시키게 된다.                                               
Service(서비스)단 객체를 업무 로직단(비지니스 로직단)이라고 부른다.
Service(서비스)단 객체가 하는 일은 Model단에서 작성된 데이터베이스 관련 여러 메소드들 중 관련있는것들만을 모아 모아서
하나의 트랜잭션 처리 작업이 이루어지도록 만들어주는 객체이다.
여기서 업무라는 것은 데이터베이스와 관련된 처리 업무를 말하는 것으로 Model 단에서 작성된 메소드를 말하는 것이다.
이 서비스 객체는 @Controller 단에서 넘겨받은 어떤 값을 가지고 Model 단에서 작성된 여러 메소드를 호출하여 실행되어지도록 해주는 것이다.
실행되어진 결과값을 @Controller 단으로 넘겨준다.
*/

// === #35. 의존객체 주입하기(DI: Dependency Injection) ===
    // ※ 의존객체주입(DI : Dependency Injection) 
    //  ==> 스프링 프레임워크는 객체를 관리해주는 컨테이너를 제공해주고 있다.
    //      스프링 컨테이너는 bean으로 등록되어진 BoardController 클래스 객체가 사용되어질때, 
    //      BoardController 클래스의 인스턴스 객체변수(의존객체)인 BoardService service 에 
    //      자동적으로 bean 으로 등록되어 생성되어진 BoardService service 객체를  
    //      BoardController 클래스의 인스턴스 변수 객체로 사용되어지게끔 넣어주는 것을 의존객체주입(DI : Dependency Injection)이라고 부른다. 
    //      이것이 바로 IoC(Inversion of Control == 제어의 역전) 인 것이다.
    //      즉, 개발자가 인스턴스 변수 객체를 필요에 의해 생성해주던 것에서 탈피하여 스프링은 컨테이너에 객체를 담아 두고, 
    //      필요할 때에 컨테이너로부터 객체를 가져와 사용할 수 있도록 하고 있다. 
    //      스프링은 객체의 생성 및 생명주기를 관리할 수 있는 기능을 제공하고 있으므로, 더이상 개발자에 의해 객체를 생성 및 소멸하도록 하지 않고
    //      객체 생성 및 관리를 스프링 프레임워크가 가지고 있는 객체 관리기능을 사용하므로 Inversion of Control == 제어의 역전 이라고 부른다.  
    //      그래서 스프링 컨테이너를 IoC 컨테이너라고도 부른다.
   
    //  IOC(Inversion of Control) 란 ?
    //  ==> 스프링 프레임워크는 사용하고자 하는 객체를 빈형태로 이미 만들어 두고서 컨테이너(Container)에 넣어둔후
    //      필요한 객체사용시 컨테이너(Container)에서 꺼내어 사용하도록 되어있다.
    //      이와 같이 객체 생성 및 소멸에 대한 제어권을 개발자가 하는것이 아니라 스프링 Container 가 하게됨으로써 
    //      객체에 대한 제어역할이 개발자에게서 스프링 Container로 넘어가게 됨을 뜻하는 의미가 제어의 역전 
    //      즉, IOC(Inversion of Control) 이라고 부른다.
    
   
    //  === 느슨한 결합 ===
    //      스프링 컨테이너가 BoardController 클래스 객체에서 BoardService 클래스 객체를 사용할 수 있도록 
    //      만들어주는 것을 "느슨한 결합" 이라고 부른다.
    //      느스한 결합은 BoardController 객체가 메모리에서 삭제되더라도 BoardService service 객체는 메모리에서 동시에 삭제되는 것이 아니라 남아 있다.
    
    // ===> 단단한 결합(개발자가 인스턴스 변수 객체를 필요에 의해서 생성해주던 것)
    // private InterBoardService service = new BoardService(); 
    // ===> BoardController 객체가 메모리에서 삭제 되어지면  BoardService service 객체는 멤버변수(필드)이므로 메모리에서 자동적으로 삭제되어진다.
	
	
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    22/4/20 
	    프로젝트 확인
	1. 배치서술자(web.xml) 확인
	2. viewresolver 확인
	3. tile-layout경로 및 내용 확인
    
    순서를 잘 기억하자.
    컨트롤러 --> 서비스 --> DAO --> DB --> DAO --> 서비스 --> 컨트롤러
    
    
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    22/5/3
    로그아웃시 현재 페이지로 지정 순서
    
    // === 로그인 또는 로그아웃을 했을 때 현재 보이던 그 페이지로 그대로 돌아가기 위한 메소드 생성 === //
	public void getCurrentURL(HttpServletRequest request) {
		HttpSession session = request.getSession();
		session.setAttribute("goBackURL", MyUtil.getCurrentURL(request));
	}

	세션을 생성 한 뒤에
	세션에 MyUtil 에 있는 함수를 불러온다.

	// *** ? 다음의 데이터까지 포함한 현재 URL 주소를 알려주는 메소드를 생성 *** //
	public static String getCurrentURL(HttpServletRequest request) {

		// 만약에 웹브라우저 주소입력란에 아래와 같이 입력되었더라면..
		// http://localhost:9090/MyMVC/member/memberList.up?currentShowPageNo=5&sizePerPage=10&searchType=name&searchWord=%EC%9C%A0


		String currentURL = request.getRequestURL().toString();
		// http://localhost:9090/MyMVC/member/memberList.up

		String queryString = request.getQueryString();
		// currentShowPageNo=5&sizePerPage=10&searchType=name&searchWord=%EC%9C%A0 (GET 방식일 경우)

		if(queryString != null) { // GET 방식일 경우
			currentURL += "?" + queryString;
			// http://localhost:9090/MyMVC/member/memberList.up?currentShowPageNo=5&sizePerPage=10&searchType=name&searchWord=%EC%9C%A0
			// 검색조건을 달아준다!
		}

		String ctxPath = request.getContextPath();
		//   /MyMVC
		//  ctxPath 이후 주소입력하기 위해 알아옴
		int beginIndex = currentURL.indexOf(ctxPath) + ctxPath.length();
		// currentURL 에서 ctxPath 가 처음으로 나타나는 시작값 + ctxPath의 길이 => beginIndex
		// ctxPath 이후의 값을 받아오기 위해 시작점을 받아오는 변수 beginIndex 생성

		currentURL = currentURL.substring(beginIndex);
		// /member/memberList.up?currentShowPageNo=5&sizePerPage=10&searchType=name&searchWord=%EC%9C%A0
		// beginIndex를 이용하여 currentURL에 ctxPath 이후의 주소를 다시 저장해준다.

		return currentURL;
	}

	3. 세션에 위의 메소드를 실행해서 현재 URL을 받아옴

	// 로그아웃시 현재 보았던 페이지로 돌아가는 것임
		HttpSession session = request.getSession();
		// 세션 정의	
		String goBackURL = (String) session.getAttribute("goBackURL");
		// 세션에 담아두었던 attribute 담아줌(키값이 goBackURL이고 value가 MyUtil.getCurrentURL(request) 인 것)
		session.invalidate();

		String message = "로그아웃 되었습니다.";

		String loc = "";
		if(goBackURL != null) {
			loc = request.getContextPath()+goBackURL;
		}
		else {
			loc = request.getContextPath()+"/login.bts";
		}
		mav.addObject("message", message);
		mav.addObject("loc", loc);
		mav.setViewName("msg");
		// 

		return mav;
		
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	AOP 

Pointcut

@Pointcut("execution(public * com.spring..*Controller.requiredLogin_*(..) )")
	public void requiredLogin() {}
	

1) com.spring : context.xml 가보면 fullbeangenerator에서 bean으로 만들기 위한 조건이 com.spring.* 이었기 때문에
2) spring..<- ..은 뒤에 무엇이, 몇개가 오던 받기 위해

requiredLogin()은 (public * com.spring..*Controller.requiredLogin_*(..) ) 양식에 속한 메소드들을 나타낸다.


Pointcut(주업무) 가 일어나기 전 일어나는 업무를 Befor Advice(공통관심사, 보조업무)라고 한다.

@Before("requiredLogin()") // 이 보조업무는 괄호 안의 주업무가 일어나기 전에 하는 보조업무이다.
public void loginCheck(JoinPoint joinpoint) { // 로그인 유무 검사를 하는 메소드 작성하기
		// JoinPoint joinpoint 는 포인트컷 되어진 주업무의 메소드이다. ex)BoardController 안의 requiredLogin_add 메소드

	// 로그인 유무를 확인하기 위해서는 request를 통해 session 을 얻어와야 한다.
	HttpServletRequest request = (HttpServletRequest) joinpoint.getArgs()[0]; // 주업무 메소드의 첫번쨰 파라미터를 얻어오는 것이다.
	HttpServletResponse response = (HttpServletResponse) joinpoint.getArgs()[1]; // 주업무 메소드의 두번쨰 파라미터를 얻어오는 것이다.
	// *** 보조업무를 쓰기 위해서는 반드시 형식을 맞춰줘야함!!!!(파라미터 순서 및 메소드 이름) 	

	HttpSession session = request.getSession();
	if(session.getAttribute("loginuser") == null ) {
		String message = "먼저 로그인 하세요~~~";
		String loc = request.getContextPath()+"/login.action";
			
		request.setAttribute("message", message);
		request.setAttribute("loc", loc);
			
		//  >>> 로그인 성공 후 로그인 하기전 페이지로 돌아가는 작업 만들기 <<< //
 		// === 현재 페이지의 주소(URL) 알아오기 === // 
		String url = MyUtil.getCurrentURL(request);
		session.setAttribute("goBackURL", url); // 세션에 rul 정보를 저장시켜둔다.
			
		RequestDispatcher dispatcher = request.getRequestDispatcher("/WEB-INF/views/msg.jsp");
		// dispatcher 를 하면 forward를 해줘야함(forward에는 request, response 필요) 
		try { 
			dispatcher.forward(request, response);
		} catch (ServletException | IOException e) {
			e.printStackTrace();
		}
			
	}
		
} // end of public void loginCheck(JoinPoint joinpoint)------------
